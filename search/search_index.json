{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data quality","text":""},{"location":"#flow","title":"Flow","text":"<pre><code>graph TD;\n    A[Configure variables] --&gt; B[Read SQL database];\n    B --&gt; V[Validation of input schema];\n    V --&gt; |Failure| X[Error alert];\n    V --&gt; |Success| C[Transform KPIs];\n    C --&gt; Y[Validation of output schema];\n    Y --&gt; |Failure| Z[Error alert]; \n    Y --&gt; |Success| D[Save to DuckDB]; \n</code></pre>"},{"location":"#data-contract","title":"Data Contract","text":"<p>             Bases: <code>SchemaModel</code></p> <p>Define the schema to validate the data of products with Pandera.</p> <p>Attributes:</p> Name Type Description <code>id_product</code> <code>Series[int]</code> <p>Identificator of the product</p> <code>name</code> <code>Series[str]</code> <p>Product name</p> <code>quantity</code> <code>Series[int]</code> <p>Available quantity of the product, must be between 20 and 200.</p> <code>price</code> <code>Series[float]</code> <p>Price of the product,  must be between 5.0 and 120.0.</p> <code>category</code> <code>Series[str]</code> <p>Product's category.</p> Source code in <code>app\\schema.py</code> <pre><code>class ProductSchema(pa.SchemaModel):\n    \"\"\"\n    Define the schema to validate the data of products with Pandera.\n\n    Attributes:\n        id_product (Series[int]): Identificator of the product\n        name (Series[str]): Product name\n        quantity (Series[int]): Available quantity of the product, must be between 20 and 200.\n        price (Series[float]): Price of the product,  must be between 5.0 and 120.0.\n        category (Series[str]): Product's category.\n    \"\"\"\n    id_product: Series[int]      \n    name: Series[str]\n    quantity: Series[int] = pa.Field(ge=20, le=200)\n    price: Series[float] = pa.Field(ge=05.0, le=120.0)\n    category: Series[str]\n\n    class Config:\n        coerce = True\n        strict = True\n</code></pre>"},{"location":"#functions","title":"Functions","text":""},{"location":"#configure-variables","title":"Configure variables","text":"<p>Load the settings from the environment variables.</p> Source code in <code>app\\etl.py</code> <pre><code>def load_settings():\n    \"\"\"Load the settings from the environment variables.\"\"\"\n    dotenv_path = Path.cwd() / '.env'\n    load_dotenv(dotenv_path=dotenv_path)\n\n    settings = {\n        \"db_host\": os.getenv('POSTGRES_HOST'),\n        \"db_user\": os.getenv('POSTGRES_USER'),\n        \"db_pass\": os.getenv('POSTGRES_PASSWORD'),\n        \"db_name\": os.getenv('POSTGRES_DB'),\n        \"db_port\": os.getenv('POSTGRES_PORT')\n    }\n\n    return settings\n</code></pre>"},{"location":"#read-from-sql-database","title":"Read from SQL database","text":"<p>Extract data from the SQL database using the query provided.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query to extract the data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Pandas' dataframe.</p> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_output(ProductSchema)\ndef extract_from_db(query: str) -&gt; pd.DataFrame:\n    \"\"\"\n    Extract data from the SQL database using the query provided.\n\n    Args:\n        query: The query to extract the data.\n\n    Returns:\n        Pandas' dataframe.\n    \"\"\"\n    settings = load_settings()\n\n    # create the connection string\n    connection_string = f\"postgresql://{settings['db_user']}:{settings['db_pass']}@{settings['db_host']}:{settings['db_port']}/{settings['db_name']}\"\n\n    # create connection engine\n    engine = create_engine(connection_string)\n\n    with engine.connect() as conn, conn.begin():\n        df_crm = pd.read_sql(query, conn)\n\n    return df_crm\n</code></pre>"},{"location":"#create-kpis","title":"Create KPIs","text":"<p>Transforms DataFrame data by applying calculations and normalizations.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Pandas' DataFrame with original data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Pandas' DataFrame after transformations.</p> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_input(ProductSchema, lazy=True)\n@pa.check_output(ProductSchemaKPI, lazy=True)\ndef transform(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Transforms DataFrame data by applying calculations and normalizations.\n\n    Args:\n        df: Pandas' DataFrame with original data.\n\n    Returns:\n        Pandas' DataFrame after transformations.\n    \"\"\"\n    # Calcular valor_total_estoque\n    df['stock_total_price'] = df['quantity'] * df['price']\n\n    # Normalizar categoria para mai\u00fasculas\n    df['normalized_category'] = df['category'].str.upper()\n\n    # Determinar disponibilidade (True se quantidade &gt; 0)\n    df['availability'] = df['quantity'] &gt; 0\n\n    return df\n</code></pre>"},{"location":"#save-to-duckdb","title":"Save to DuckDB","text":"<p>Load the DataFrame to DuckDB, creating or replacing the specified table.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Pandas' DataFrame to be loaded into DuckDB.</p> required <code>table_name</code> <code>str</code> <p>Duckdb tablename where the data will be inserted</p> required <code>db_file</code> <code>str</code> <p>DuckDB file.</p> <code>'my_duckdb.db'</code> Source code in <code>app\\etl.py</code> <pre><code>@pa.check_input(ProductSchemaKPI, lazy=True)\ndef load_to_duckdb(df: pd.DataFrame, table_name: str, db_file: str = 'my_duckdb.db'):\n    \"\"\"\n    Load the DataFrame to DuckDB, creating or replacing the specified table.\n\n    Args:\n        df: Pandas' DataFrame to be loaded into DuckDB.\n        table_name: Duckdb tablename where the data will be inserted\n        db_file: DuckDB file. \n    \"\"\"\n\n    # connect o duckdb. File will be created if it doesn't exist\n    con = duckdb.connect(database=db_file, read_only=False)\n\n    # register the dataframe as a temporary table\n    con.register('df_temp', df)\n\n    # uses SQL to insert data from temp table to a permanent one\n    con.execute(f\"CREATE OR REPLACE TABLE {table_name} AS SELECT * FROM df_temp\")\n\n    # close the connection\n    con.close()\n</code></pre>"}]}